/**
 * 蓝牙模块
 */

'use strict';
const noble = require('../src/lib/@abandonware/noble');
// const noble = require('../dist/abandonware-noble.js');
console.log(noble)

const { getBlueToothService, getBluetoothItem, bluetoothConfig } = require('./utils/bluetoothList');

/**
 * 已连接设备
 * {
 * localName - 蓝牙名称
 * config - 蓝牙配置项
 * peripheral - 蓝牙对象
 * state - 蓝牙状态
 * hasRead - 是否可以读取
 * hasNotify - 是否有通知
 * hasWrite - 是否可以写入
 * readObj - 读取对象
 * writeObj - 写入对象
 * }
 */
noble.on('stateChange', async (state) => {
    console.log(state)
    if (state === 'poweredOn') {
        console.log("[bluetooth] start:开始扫描蓝牙设备");
        startScan()
    } else {
        console.log("[bluetooth] error:当前设备不支持蓝牙");
    }
});

// 扫描到蓝牙监听事件
noble.on('scanStart', state => {
    console.log('蓝牙扫描开始')
});

noble.on('scanStop', () => {
    console.log('蓝牙扫描结束')
    // if (allowConnect) {
    //     startScan()
    // }
});

// 查找已配对蓝牙
function getBluetoothList() {
    return bluetoothConfig.map(item => {
        const { type, name, state, } = item
        if (item.command) {
            const command = item.command.map(item => {
                return item.name
            })
            return { type, name, state, command }
        } else {
            return { type, name, state }
        }

    })
}

// 扫描蓝牙
function startScan() {
    noble.startScanningAsync([], true)
}

// 停止扫描
function stopScan() {
    noble.stopScanning();
}

const list = {
    cfe5170602b6: "体重秤",
    c66c020403a8: "温度计",
}

// 发现蓝牙设备
noble.on('discover', async peripheral => {
    const { localName } = peripheral.advertisement
    // if (localName) {
    //     console.log(localName)
    // }
    // if (peripheral.uuid === 'cfe5170602b6') {
    //     console.log("体重秤", localName, peripheral)
    // }
    // if (peripheral.uuid === 'c66c020403a8') {
    //     console.log("温度计", localName, peripheral)
    // }
    // const { localName } = peripheral.advertisement
    if (!bluetoothList.hasLinkList(localName)) {
        const linkRes = bluetoothList.getLinkList(localName)
        if (linkRes && linkRes.state === 'connected') {
            return
        }

        const config = getBluetoothItem(localName)
        if (config && peripheral.state === 'disconnected') {
            // 设置蓝牙连接状态
            bluetoothList.setLinkList(peripheral, config)
            // 连接蓝牙
            connect(peripheral, localName, config)
        }
    }
});

/**
 * 连接蓝牙设备
 * @param {*} peripheral - 蓝牙对象
 * @param {*} localName - 蓝牙名称
 * @param {*} config - 蓝牙配置项
 * @returns 
 */
function connect(peripheral, localName, config) {
    return new Promise(function (resolve, reject) {
        // 设备连接
        peripheral.on('connect', () => {
            console.log(`${localName}已连接`, config.service_uuid, peripheral.state)
            bluetoothList.setLinkState(localName, peripheral.state)
            if (peripheral.state === 'connected') {
                peripheral.discoverServices(config.service_uuid)
            }
            resolve()
        });

        // 发现服务
        peripheral.on('servicesDiscover', services => {
            services[0].once('characteristicsDiscover', characteristics => {
                // console.log('发现特征值', characteristics)
                characteristics.forEach(item => {
                    if (item.properties.indexOf('notify') >= 0 && !bluetoothList.getLinkProperties(localName, 'hasNotify')) {
                        item.subscribe();
                        item.subscribeAsync()
                        console.log(item)
                        item.once('notify', (state) => {
                            item.toString((error, data) => {
                                console.log(error, data)
                            })
                            // 设置蓝牙通知状态
                            bluetoothList.setLinkNotifyState(localName, state)
                            console.log(`${localName}订阅通知状态`, state)
                            setTimeout(() => {
                                writeValue({ name: 'BLE Device', commandName: '读取数据' })
                            }, 3000);
                        });
                        item.on('read', async (data) => {
                            console.log('read')
                        })
                        item.on('write', async (data) => {
                            console.log('write')
                        })
                        item.on('broadcast', async (data) => {
                            console.log('broadcast')
                        })
                        item.on('descriptorsDiscover', async (data) => {
                            console.log('descriptorsDiscover')
                        })

                        // 接收蓝牙广播消息
                        item.on('data', async (data) => {
                            console.log(`接收${localName}蓝牙广播消息:`, handleNotifications(buffer2HEX(data)))
                            // sendStatusToWindow(eeApp.electron.mainWindow, {
                            //     type: "notify",
                            //     data: {
                            //         type: config.type,
                            //         res: {
                            //             data: await config.decode(handleNotifications(buffer2HEX(data)), writeValue)
                            //         }
                            //     }
                            // })
                        });
                    }
                    if (item.properties.indexOf('read') >= 0 && !bluetoothList.getLinkProperties(localName, 'hasNotify')) {
                        // 设置蓝牙读取状态
                        bluetoothList.setLinkReadState(localName, true)
                        config.readObj = item

                    }
                    if ((item.properties.indexOf('write') >= 0 || item.properties.indexOf('writeWithoutResponse') >= 0) && !bluetoothList.getLinkProperties(localName, 'hasNotify')) {
                        // 设置蓝牙写入状态
                        bluetoothList.setLinkWriteState(localName, true)
                        config.writeObj = item
                        console.log(`${localName}设置蓝牙写入状态`)

                    }
                })
            });
            if (peripheral.state === 'connected') {
                services[0].discoverCharacteristics(config.characteristic_uuid)
            }
        });

        // 设备断开连接
        peripheral.on('disconnect', () => {
            // noble.disconnect(peripheral.uuid)
            console.log(`${localName}已断开连接`)
            // 更改设备状态
            bluetoothList.removeLinkList(localName)
        })

        peripheral.connect();
    })
}

// 写数据
function writeValue(list) {
    const { name, commandName } = list
    const _object = getBluetoothItem(name)
    if (_object && _object.writeObj) {
        const command = _object.command.find(item => {
            return item.name === commandName
        })
        if (typeof command.handler === 'function') {
            const data = command.handler()
            const _data = data.map((item) => {
                return `0x${item}`
            })
            console.log(_data)
            _object.writeObj.write(Buffer.from(_data), false)
        }

    }
}

//buffer转十六进制
function buffer2HEX(buffer, isUpperCase = false, isReverse = false) {
    let newBuffer = Buffer.from(buffer);
    if (isReverse) {
        newBuffer.swap16();
    }
    let hex = newBuffer.toString("hex");
    if (isUpperCase) {
        return hex.toUpperCase()
    } else {
        return hex;
    }
}

// 数据解码
function handleNotifications(value) {
    // 解析设备回传数据
    let data = []
    for (let i = 0; i < value.length; i += 2) {
        const k = value.substr(i, 2)
        data.push(k.length === 2 ? k : `0${k}`)
    }
    return data
}

const bluetoothList = function () {
    const _blueToothList = []
    /**
     * 设置连接的蓝牙
     */
    function setLinkList(peripheral, config) {
        const { localName } = peripheral.advertisement
        _blueToothList.push({
            localName,
            peripheral,
            config,
            state: peripheral.state,
            hasRead: false,
            hasNotify: false,
            hasWrite: false,
            readObj: null,
            writeObj: null,
        })
    }

    /**
     * 移除连接的蓝牙
     */
    function removeLinkList(localName) {
        const index = _blueToothList.findIndex(item => item.localName === localName)
        if (index >= 0) {
            _blueToothList.splice(index, 1)
        }
    }
    /**
     * 是否存在连接的蓝牙
     * 
     */
    function hasLinkList(localName) {
        if (localName) {
            return _blueToothList.some(item => item.localName === localName)
        }
        return true
    }

    /**
     * 设置蓝牙连接状态
     */
    function setLinkState(localName, state) {
        const index = _blueToothList.findIndex(item => item.localName === localName)
        if (index >= 0) {
            _blueToothList[index].state = state
        }
    }

    /**
     * 设置蓝牙的读取状态
     */
    function setLinkReadState(localName, state) {
        const index = _blueToothList.findIndex(item => item.localName === localName)
        if (index >= 0) {
            _blueToothList[index].hasRead = state
        }
    }

    /**
     * 设置蓝牙的写入状态
     */
    function setLinkWriteState(localName, state) {
        const index = _blueToothList.findIndex(item => item.localName === localName)
        if (index >= 0) {
            _blueToothList[index].hasWrite = state
        }
    }

    /**
     * 设置蓝牙的通知状态
     */
    function setLinkNotifyState(localName, state) {
        const index = _blueToothList.findIndex(item => item.localName === localName)
        if (index >= 0) {
            _blueToothList[index].hasNotify = state
        }
    }

    /**
     * 获取蓝牙的状态
     * @pamam {String} localName 蓝牙名称
     * @pamam {String} type 蓝牙状态类型
     */
    function getLinkProperties(localName, type) {
        const item = _blueToothList.find(item => item.localName === localName)
        if (item) {
            return item[type]
        }
        return false
    }

    /**
     * 查找已连接蓝牙
     */
    function getLinkList(localName) {
        const item = _blueToothList.find(item => item.localName === localName)
        if (item) {
            return item
        }
        return false
    }

    /**
     * 获取所有蓝牙连接记录
     */
    function getAllLinkList(localName) {
        return _blueToothList
    }

    return {
        hasLinkList,
        setLinkList,
        setLinkState,
        setLinkReadState,
        setLinkWriteState,
        setLinkNotifyState,
        getLinkList,
        getAllLinkList,
        removeLinkList,
        getLinkProperties
    }
}()
