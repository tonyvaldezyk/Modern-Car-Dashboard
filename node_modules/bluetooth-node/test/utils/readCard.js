"use strict";

const _ = require("lodash");
const path = require("path");
const fs = require("fs");
const electronApp = require("electron").app;
const { exec } = require("child_process");
// 动态库信息
const ArrayType = require("ref-array-napi");
const ffi = require("ffi-napi");
const ref = require("ref-napi");
const iconv = require("iconv-lite");

// 德卡读取身份证
function DK_sfzCard() {
    try {
        let dllFile = "ReadCard.dll";
        let dllPath = path.join(path.resolve(), "build", "extraResources", "DK", dllFile);
        if (electronApp.isPackaged) {
            // 打包后
            dllPath = path.join(path.resolve(), "DK", dllFile);
        }
        const dllFunc = new ffi.Library(dllPath, {
            iReadIdentityCard: ["int", ['char*']]
        });

        const stringModel = ArrayType(ref.types.char, 500);
        const IdCardModel = iconv.encode(new stringModel(), "gbk");

        const state = dllFunc.iReadIdentityCard(IdCardModel)
        if (state === 0) {
            const IdCardInfo = iconv.decode(IdCardModel, "gbk")
            const arr = IdCardInfo.split("|");
            const dir = path.join(path.resolve(), "tmp.jpg");
            const readStream = fs.readFileSync(dir); // 文件流
            const base64 = readStream.toString("base64"); // 转 base64
            return {
                state: "success",
                data: arr,
                photo: base64,
            };
        }

        return {
            state: "fail",
            message: "未读取到身份证信息",
        };
    } catch (e) {
        return {
            state: "fail",
            message: "读卡失败请检查驱动是否正确",
        };
    }
}

// 德卡读取社保卡
function DK_cityCard() {
    try {
        // 声明一个类型
        let dllFile = "ReadCard.dll";

        let dllPath = path.join(path.resolve(), "build", "extraResources", "DK", dllFile);
        if (electronApp.isPackaged) {
            // 打包后
            dllPath = path.join(path.resolve(), "DK", dllFile);
        }

        const dllFunc = new ffi.Library(dllPath, {
            iReadPersonInfo: ["int", ['char*']],
            iGetItemInfo: ["int", ['int', 'char*']],
        });

        const stringModel = {
            idCard: ArrayType(ref.types.char, 18),
            name: ArrayType(ref.types.char, 4),
            gender: ArrayType(ref.types.char, 2),
            nationality: ArrayType(ref.types.char, 5),
            address: ArrayType(ref.types.char, 20),
            birthday: ArrayType(ref.types.char, 8),
            Ident: ArrayType(ref.types.char, 20),
            cityIdCard: ArrayType(ref.types.char, 20),
        };
        const flag = {
            idCard: 1,
            name: 2,
            gender: 3,
            nationality: 4,
            address: 5,
            birthday: 6,
            Ident: 7,
            cityIdCard: 13,
        }
        const state = dllFunc.iReadPersonInfo(new Buffer(10))
        if (state === 0) {
            const info = {}
            for (let key in stringModel) {
                const res = iconv.encode(new stringModel[key](), "gbk");
                dllFunc.iGetItemInfo(flag[key], res)
                const temp = iconv.decode(res, "gbk")
                const data = temp.split('\x00')
                Object.assign(info, { [key]: data.length > 0 ? data[0] : '' })
            }
            const { Ident, idCard, gender, birthday, name, cityIdCard } = info
            return {
                state: "success",
                data: [Ident, idCard, gender, birthday, name, cityIdCard]
            };
        }

        return {
            state: "fail",
            message: "未读取到社保卡信息",
        };
    } catch (e) {
        return {
            state: "fail",
            message: "读卡失败请检查驱动是否正确",
        };
    }
}

// 明华读取社保卡
function MH_cityCard() {
    try {
        // 声明一个类型
        const stringModel = ArrayType(ref.types.char, 127);
        let dllFile = "mwpd_32.dll";
        let dllPath = path.join(path.resolve(), dllFile);
        const dllFunc = new ffi.Library(dllPath, {
            ic_init: ["int", ["int"]],
            dv_beep: ["int", ["int", "int"]],
            iReadIDCard: ["long", ["char*"]],
            iReadIDCard_x9: ["long", ["int", "char*"]],
            mwReadSSCardInfo: ["long", ["int", "int", "char*"]],
            ic_exit: ["int", ["int"]],
        });

        const devId = dllFunc.ic_init(100);
        if (devId > 0) {
            // 声明指针,并进行类型转换
            const sbkInfo = iconv.encode(new stringModel(), "gbk");
            if (dllFunc.mwReadSSCardInfo(devId, 3, sbkInfo) >= 0) {
                const str = iconv.decode(sbkInfo, "gbk");
                const arr = str.split("|");
                setTimeout(() => {
                    dllFunc.ic_exit(devId);
                }, 200);

                return {
                    state: "success",
                    data: arr,
                };
            }
        }
        return {
            state: "fail",
            message: "未读取到社保卡信息",
        };
    } catch (e) {
        return {
            state: "fail",
            message: "读卡失败请检查驱动是否正确",
        };
    }
}

// 明华读取身份证
function MH_sfzCard() {
    try {
        const stringModel = ArrayType(ref.types.char, 127);
        let dllFile = "mwpd_32.dll";
        let dllPath = path.join(path.resolve(), dllFile);
        const dllFunc = new ffi.Library(dllPath, {
            ic_init: ["int", ["int"]],
            dv_beep: ["int", ["int", "int"]],
            iReadIDCard: ["long", ["char*"]],
            iReadIDCard_x9: ["long", ["int", "char*"]],
            mwReadSSCardInfo: ["int", ["int", "int"]],
            ic_exit: ["int", ["int"]],
        });

        const devId = dllFunc.ic_init(100);

        if (devId > 0) {
            // 蜂鸣
            // dllFunc.dv_beep(devId, 10)
            // 声明指针,并进行类型转换
            const IdCardInfo = iconv.encode(new stringModel(), "gbk");
            // dllFunc.mwReadSSCardInfo(devId, 1)
            let a = dllFunc.iReadIDCard_x9(devId, IdCardInfo);

            if (a >= 0) {
                const str = iconv.decode(IdCardInfo, "gbk");
                const arr = str.split("|");
                setTimeout(() => {
                    dllFunc.ic_exit(devId);
                }, 200);

                const dir = path.join(path.resolve(), "zp.bmp");
                const readStream = fs.readFileSync(dir); // 文件流
                const base64 = readStream.toString("base64"); // 转 base64
                return {
                    state: "success",
                    data: arr,
                    photo: base64,
                };
            }
        }
        return {
            state: "fail",
            message: "未读取到身份证信息",
        };
    } catch (e) {
        return {
            state: "fail",
            message: "读卡失败请检查驱动是否正确",
        };
    }
}

/*
* 读取电子医保码
*/
function runMedicalCode() {
    return new Promise((resolve) => {
        const encoding = 'cp936';
        const binaryEncoding = 'binary';
        const workerProcess = exec('DZPZConsole.exe', { encoding: binaryEncoding, cwd: path.join(process.cwd(), 'readEHR') })

        // 打印正常的后台可执行程序输出
        workerProcess.stdout.on('data', function (data) {
            let str = iconv.decode(Buffer(data, binaryEncoding), encoding)
            str = str.replace(/ /g, "").replace(/[\r]/g, "")
            const arr = str.split('\n')
            try {
                const arr2 = [...arr[0].split(','), arr[1], arr[2]]
                if (arr[0].split(',')[0] === 'ret=0') {
                    const list = { type: "success", message: "电子医保数据获取成功" }
                    arr2.forEach(item => {
                        const k = item.split('=')
                        if (k[0] === 'retMsg') {
                            list[k[0]] = k[1].split('|')
                        } else {
                            list[k[0]] = k[1]
                        }
                    })
                    resolve(list)
                } else {
                    resolve({ type: "error", message: "医保电子凭证二维码无效，请刷新后重试" })
                }
            } catch (e) {
                resolve({ type: "error", message: "医保电子凭证二维码无效，请刷新后重试" })
            }
        });
    })
}

module.exports = {
    DK_sfzCard,
    DK_cityCard,
    MH_cityCard,
    MH_sfzCard,
    runMedicalCode
}