/**
 * 尿液分析仪数据分析
 */
const result = {
    LEU: [
        '-', '+-', '+1', '+2', '+3', '/', '/', '/'
    ],
    NIT: [
        '-', '+', '/', '/', '/', '/', '/', '/'
    ],
    UBG: [
        '-', '+1', '+2', '+3', '/', '/', '/', '/'
    ],
    PRO: [
        '-', '+-', '+1', '+2', '+3', '+4', '/', '/'
    ],
    PH: [
        '5.0', '6.0', '6.5', '7.0', '7.5', '8.0', '8.5', '/'
    ],
    BLD: [
        '-', '+-', '+1', '+2', '+3', '/', '/', '/'
    ],
    SG: [
        '1.000', '1.005', '1.010', '1.015', '1.020', '1.025', '1.030', '/'
    ],
    KET: [
        '-', '+-', '+1', '+2', '+3', '+4', '/', '/'
    ],
    BIL: [
        '-', '+1', '+2', '+3', '/', '/', '/', '/'
    ],
    GLU: [
        '-', '+-', '+1', '+2', '+3', '+4', '/', '/'
    ],
    VC: [
        '-', '+-', '+1', '+2', '+3', '/', '/', '/'
    ],
    Ma: ['10', '30', '80', '150', '/', '/', '/', '/']
}



function getUrineData(list) {
    if (!list) {
        return {}
    }
    const data = {
        LEU: getData(list, 50, 3),
        NIT: getData(list, 77, 3),
        UBG: getData(list, 74, 3),
        PRO: getData(list, 71, 3),
        PH: getData(list, 68, 3),
        BLD: getData(list, 65, 3),
        SG: getData(list, 93, 3),
        KET: getData(list, 90, 3),
        BIL: getData(list, 87, 3),
        GLU: getData(list, 84, 3),
        VC: getData(list, 81, 3),
        Ma: -1
    }
    for (let key in data) {
        data[key] = getResult(key, data[key])
    }
    return data
}

// 获得返回值
function getResult(key, index) {
    const data = result[key]
    if (data && index <= 7 && index >= 0) {
        return data[index]
    }
    return '无数据'
}

// 取数据
function getData(text, start, len) {
    return parseInt(text.substr(start, len), 2)
}

// 格式化数据
function formatData(text) {
    let zero = ''
    for (let i = 1; i <= 8 - text.length; i++) {
        zero += '0'
    }
    return `${zero}${text}`
}

// 检验数组完整性
let tempData = []
function checkArray(res) {
    return new Promise((resolve, reject) => {
        tempData = tempData.concat(res)
        if (tempData[0] === 'a5') {
            if (tempData[1] === 'dd' || tempData[1] === 'aa') {
                const len = parseInt(tempData[2], 16) + 4
                if (len === tempData.length) {
                    resolve(tempData)
                    tempData = []
                } else if (tempData.length > len) {
                    resolve(tempData)
                    tempData = []
                }
            } else {
                resolve(tempData)
                tempData = []
            }
        } else {
            tempData = []
            resolve([])
        }
    })
}

// 获取心电时间同步报文
function getansyctime() {
    function checkTime(i) {
        if (i.length < 2) {
            i = '0' + i
        }
        return i
    }
    const nowdate = new Date()
    const year = `0${nowdate.getFullYear().toString(16)}`,
        month = (nowdate.getMonth() + 1).toString(16),
        date = nowdate.getDate().toString(16),
        day = nowdate.getDay().toString(16),
        h = nowdate.getHours().toString(16),
        m = nowdate.getMinutes().toString(16),
        s = nowdate.getSeconds().toString(16)
    var list = [
        'a5',
        '33',
        '08',
        s,
        m,
        h,
        date,
        month,
        year.substr(2, 2),
        year.substr(0, 2),
        day
    ]
    list = list.map((item) => checkTime(item))
    list.push(checkTime(encodeCrc8(list.join('0x'))))
    return list
}

// CRC-8/MIXIM校验
function encodeCrc8(hex) {
    var _crc8 = [
        0x00, 0x5e, 0xbc, 0xe2, 0x61, 0x3f, 0xdd, 0x83, 0xc2, 0x9c, 0x7e, 0x20,
        0xa3, 0xfd, 0x1f, 0x41, 0x9d, 0xc3, 0x21, 0x7f, 0xfc, 0xa2, 0x40, 0x1e,
        0x5f, 0x01, 0xe3, 0xbd, 0x3e, 0x60, 0x82, 0xdc, 0x23, 0x7d, 0x9f, 0xc1,
        0x42, 0x1c, 0xfe, 0xa0, 0xe1, 0xbf, 0x5d, 0x03, 0x80, 0xde, 0x3c, 0x62,
        0xbe, 0xe0, 0x02, 0x5c, 0xdf, 0x81, 0x63, 0x3d, 0x7c, 0x22, 0xc0, 0x9e,
        0x1d, 0x43, 0xa1, 0xff, 0x46, 0x18, 0xfa, 0xa4, 0x27, 0x79, 0x9b, 0xc5,
        0x84, 0xda, 0x38, 0x66, 0xe5, 0xbb, 0x59, 0x07, 0xdb, 0x85, 0x67, 0x39,
        0xba, 0xe4, 0x06, 0x58, 0x19, 0x47, 0xa5, 0xfb, 0x78, 0x26, 0xc4, 0x9a,
        0x65, 0x3b, 0xd9, 0x87, 0x04, 0x5a, 0xb8, 0xe6, 0xa7, 0xf9, 0x1b, 0x45,
        0xc6, 0x98, 0x7a, 0x24, 0xf8, 0xa6, 0x44, 0x1a, 0x99, 0xc7, 0x25, 0x7b,
        0x3a, 0x64, 0x86, 0xd8, 0x5b, 0x05, 0xe7, 0xb9, 0x8c, 0xd2, 0x30, 0x6e,
        0xed, 0xb3, 0x51, 0x0f, 0x4e, 0x10, 0xf2, 0xac, 0x2f, 0x71, 0x93, 0xcd,
        0x11, 0x4f, 0xad, 0xf3, 0x70, 0x2e, 0xcc, 0x92, 0xd3, 0x8d, 0x6f, 0x31,
        0xb2, 0xec, 0x0e, 0x50, 0xaf, 0xf1, 0x13, 0x4d, 0xce, 0x90, 0x72, 0x2c,
        0x6d, 0x33, 0xd1, 0x8f, 0x0c, 0x52, 0xb0, 0xee, 0x32, 0x6c, 0x8e, 0xd0,
        0x53, 0x0d, 0xef, 0xb1, 0xf0, 0xae, 0x4c, 0x12, 0x91, 0xcf, 0x2d, 0x73,
        0xca, 0x94, 0x76, 0x28, 0xab, 0xf5, 0x17, 0x49, 0x08, 0x56, 0xb4, 0xea,
        0x69, 0x37, 0xd5, 0x8b, 0x57, 0x09, 0xeb, 0xb5, 0x36, 0x68, 0x8a, 0xd4,
        0x95, 0xcb, 0x29, 0x77, 0xf4, 0xaa, 0x48, 0x16, 0xe9, 0xb7, 0x55, 0x0b,
        0x88, 0xd6, 0x34, 0x6a, 0x2b, 0x75, 0x97, 0xc9, 0x4a, 0x14, 0xf6, 0xa8,
        0x74, 0x2a, 0xc8, 0x96, 0x15, 0x4b, 0xa9, 0xf7, 0xb6, 0xe8, 0x0a, 0x54,
        0xd7, 0x89, 0x6b, 0x35
    ]

    var typedArray = new Uint8Array(
        hex.match(/[\da-f]{2}/gi).map(function (h) {
            return parseInt(h, 16)
        })
    )
    var ucLen = typedArray.length
    var ucPtr = typedArray
    var ucCRC8 = 0
    var i = 0
    while (ucLen--) {
        ucCRC8 = _crc8[ucCRC8 ^ ucPtr[i]]
        i++
    }
    return ucCRC8.toString(16).toUpperCase()
}

module.exports = {
    getUrineData,
    formatData,
    checkArray,
    getansyctime,
    encodeCrc8
}