/**
 * 蓝牙设备列表
 */
const formatData = require('./urineResult').formatData;
const getUrineData = require('./urineResult').getUrineData;
const getansyctime = require('./urineResult').getansyctime;
const checkArray = require('./urineResult').checkArray;
const encodeCrc8 = require('./urineResult').encodeCrc8;

const bluetoothConfig = [
    {
        type: '力康血糖尿酸胆固醇分析仪',
        name: 'BLE Device',
        service_uuid: ['ff12'],
        characteristic_uuid: ['ff02', 'ff01'],
        command: [{
            name: "读取数据",
            handler: () => {
                // ['00','43','00','44','17','47','38','32','34','35','34','38','50']
                // ['01','40','84','0e','0a','01','11','04','06','00','00','00','d3']

                let list = ['aa', 'aa', 'aa', 'aa']
                return list
            }
        }],
        decode(val) {
            // console.log(val)
        }
    },
    {
        type: '温度计',
        name: 'btutu',
        service_uuid: ['fff0'],
        characteristic_uuid: ['fff1'],
        decode(val) {
            if (val[5] == 'e4' || val.length < 6) {
                console.log('数据错误')
            } else {
                const flag = parseFloat(val[4], 16)
                let temperature = `${val[1]}${val[2]}`
                temperature = (parseInt(temperature, 16) / 10).toFixed(1)
                return {
                    temperature: temperature,
                    type: flag == '01' ? '体温' : '物体温度',
                    isfever:
                        flag !== 0 && flag !== 4 ? Number(temperature) >= 37.6 : false
                }
            }
        }
    },
    {
        type: '体重秤',
        name: 'BodyFat Scale1',
        service_uuid: ['fff0'],
        characteristic_uuid: ['fff4'],
        decode(val) {
            console.log(val)
            if (val[0] === 'cf') {
                const weight = parseInt(`${val[4]}${val[3]}`, 16) / 100
                return {
                    tizhong: weight,
                    status: val[9], //状态
                    HeartAnomaly: 0
                }
            }
        }
    },
    {
        type: '血压计',
        name: 'PC-100',
        service_uuid: ['fff0'],
        characteristic_uuid: ['fff1'],
        decode(val) {
            return {
                arr: val.map((item) => {
                    return parseInt(item, 16)
                })
            }
        }
    },
    {
        type: '心电仪',
        name: 'PC80B',
        service_uuid: ['fff0'],
        characteristic_uuid: ['fff1', 'fff2', 'fff3'],
        command: [{
            name: "同步时钟",
            handler: () => {
                return getansyctime()
            }
        },
        {
            name: "应答编码",
            handler: () => {
                let list = ['a5', '55', '01', '00']
                list.push(encodeCrc8(list1.join('0x')))
                return list
            }
        }],
        async decode(res, writeValue) {
            const data = await checkArray(res)
            let params = null
            // 同步时间报文
            if (data[1] === '33') {
                writeValue({ name: 'PC80B-BLE', commandName: '同步时钟' })
                tempData = []
            } else if (data[1] === '55') {
                // 请求接受数据包
                writeValue({ name: 'PC80B-BLE', commandName: '应答编码' })
                tempData = []
            } else if (data[1] === '11') {
                // 保存设备序列表号
                const list = []
                for (let i = 6; i <= 17; i++) {
                    list.push(data[i])
                }
                this.device.id = list
            } else if (data[1] === 'aa') {
                if (data[2] === '01') {
                    // 回复接收接收指令
                    //  this.writeValue(this.device.command(this.device)[1])
                } else {
                    const ecg = []
                    for (let i = 4; i <= data.length - 2; i++) {
                        ecg.push(data[i])
                    }
                    params = {
                        code: 99,
                        text: '测量数据包',
                        data: data,
                        ecg: ecg.join('')
                    }
                }
            } else if (data[1] === 'dd') {
                //   50 正在检测通道
                //   51 准备测量
                //   52 测量进行中
                //   53 开始分析   已经测量结束
                //   54 报告测量结果
                //   55 跟踪停止
                if (data[6] == '50') {
                    const ecg = []
                    for (let i = 9; i <= data.length - 2; i++) {
                        ecg.push(data[i])
                    }
                    params = {
                        text: '正在检测通道',
                        data: data,
                        dy: data[5],
                        ecg: ecg.join('')
                    }
                } else if (data[6] == '51') {
                    // 准备测量
                    const ecg = []
                    for (let i = 9; i <= data.length - 2; i++) {
                        ecg.push(data[i])
                    }
                    params = {
                        text: '准备测量',
                        data: data,
                        dy: data[5],
                        ecg: ecg.join('')
                    }
                } else if (data[6] === '52') {
                    // 正在测量
                    const ecg = []
                    for (let i = 9; i <= data.length - 2; i++) {
                        ecg.push(data[i])
                    }
                    params = {
                        text: '正在测量',
                        data: data,
                        dy: data[5],
                        ecg: ecg.join('')
                    }
                } else if (data[6] === '53') {
                    // 测量完成
                    params = {
                        text: '测量完成',
                        data: data
                    }
                } else if (data[6] === '54') {
                    let rate = '0x' + data[16]
                    let result = '0x' + data[17]
                    params = {
                        text: '报告测量结果',
                        result: parseInt(result),
                        rate: parseInt(rate)
                    }
                } else if (data[6] == '55' || data[6] == '00') {
                    params = {
                        text: '跟踪停止'
                    }
                } else if (data[6] == '05') {
                    params = {
                        text: '跟踪停止'
                    }
                } else {
                    params = {
                        text: '状态异常'
                    }
                }
                params.code = data[6]
            }
            if (params) {
                tempData = []
                return params
            }
        }
    },
    {
        type: '血糖仪',
        name: 'Bioland-BGM',
        service_uuid: ['1000'],
        characteristic_uuid: ['1002', '1003'],
        command: [{
            name: "读取数据",
            handler: () => {
                return ['5A', '0A', '03', '10', '05', '02', '0F', '21', '3B', 'E8']
            }
        }],
        decode(val) {
            return {
                arr: val
            }
        }
    },
    {
        type: '尿酸分析仪',
        name: 'Bioland-BUM',
        service_uuid: ['1000'],
        characteristic_uuid: ['1001'],
        command: [{
            name: "读取数据",
            handler: () => {
                return ['5A', '0A', '03', '10', '05', '02', '0F', '21', '3B', 'E8']
            }
        }],
        decode(val) {
            return {
                arr: val
            }
        }
    },
    {
        type: '尿液分析仪',
        name: 'BLE-EMP-Ui',
        service_uuid: ['ffe0'],
        characteristic_uuid: ['ffe1'],
        command: [{
            name: "读取数据",
            handler: () => {
                return ['93', '8E', '04', '00', '08', '04', '10']
            }
        },
        {
            name: "同步时钟",
            handler: () => {
                // 初始化尿液分析仪，时钟同步
                const now = new Date();
                const timeArr = [Number((now.getFullYear()).toString().substr(2)), now.getMonth() + 1, now.getDate(), now.getHours(), now.getMinutes()].map(item => {
                    const num = item.toString(16)
                    return num.length === 2 ? num : `0${num}`
                })
                const checksum = ['09', '00', '08', '02', ...timeArr].reduce((sum, item) => {
                    return sum + parseInt(item, 16)
                }, 0).toString(16)
                return ['93', '8E', '09', '00', '08', '02', ...timeArr, checksum]
            }
        }],
        decode: (val) => {
            let arr = [...val]
            if (`${arr[0]}${arr[1]}` === '938e') {
                if (arr[5] === '04') {
                    // 读取尿酸仪单条数据
                    let list = ''
                    for (let i = 6; i <= arr.length - 2; i++) {
                        const temp = parseInt(arr[i], 16).toString(2)
                        list += formatData(temp)
                    }
                    const data = getUrineData(list)
                    return { type: "success", message: '数据读取成功', data }
                }
            } else {
                return { type: "error", message: '数据错误' }
            }
        }
    }
]

/**
 * 返回所有蓝牙的服务
 * @returns 
 */
function getBlueToothService() {
    const list = bluetoothConfig.map((item) => item.service_uuid)
    return list
}

/**
 * 返回蓝牙设备信息
 * @param {*} name 
 * @returns 
 */
function getBluetoothItem(name) {
    const item = bluetoothConfig.find((item) => name.indexOf(item.name) >= 0)
    return item
}

module.exports = {
    getBlueToothService,
    getBluetoothItem,
    bluetoothConfig
}